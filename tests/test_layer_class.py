import pytest  
import archnemesis as ans
import numpy as np
import os
curr = os.getcwd()
  
################################################################################################################################################

def test_layer_nemesis_units():
    '''
    Test the calculation of the layers against NEMESIS (dust units are in particles per gram of atmosphere)
    '''
    
    os.chdir('tests/files/Jupiter_test_layer/') #Changing directory to read files
    runname = 'cirstest'
    
    #Reading the input files
    Atmosphere,Measurement,Spectroscopy,Scatter,Stellar,Surface,CIA,Layer,Variables,Retrieval = ans.Files.read_input_files(runname)
    os.chdir(curr) #Changing directory back to the original
    
    #Initialising forward model class
    ForwardModel = ans.ForwardModel_0(runname=runname, Atmosphere=Atmosphere,Surface=Surface,Measurement=Measurement,Spectroscopy=Spectroscopy,Stellar=Stellar,Scatter=Scatter,CIA=CIA,Layer=Layer,Variables=Variables)
    
    #Calling subprofretg
    ForwardModel.subprofretg()
    
    #Calculating Path
    ForwardModel.calc_path()
    
    #NEMESIS results
    BASEH = np.array([-83.89, -71.03, -59.19, -48.29, -38.27, -29.07, -20.63, -12.87, -5.76, 0.84,
                      6.86, 12.37, 17.45, 22.23, 26.8, 31.23, 35.56, 39.88, 44.15, 48.42,
                      52.78, 57.26, 61.88, 66.64, 71.61, 76.84, 82.21, 87.76, 93.45, 99.27,
                      105.2, 111.21, 117.35, 123.64, 129.94, 136.26, 142.63, 149.01, 155.4, 161.81,
                      168.34, 174.95, 181.6, 188.25, 194.91, 201.6, 208.31, 215.03, 221.89, 228.83,
                      235.78, 242.77, 249.75, 256.74, 263.77, 270.82, 278.01, 285.27, 292.55, 299.83,
                      307.15, 314.48, 321.79, 329.21, 336.96, 344.9, 353., 361.28, 369.82, 378.69, 387.85])  #km
    BASEP = np.array([9.8717e+00, 7.6158e+00, 5.8754e+00, 4.5328e+00, 3.4969e+00, 2.6978e+00,
                    2.0813e+00, 1.6057e+00, 1.2387e+00, 9.5567e-01, 7.3728e-01, 5.6879e-01,
                    4.3881e-01, 3.3853e-01, 2.6117e-01, 2.0149e-01, 1.5544e-01, 1.1992e-01,
                    9.2517e-02, 7.1375e-02, 5.5064e-02, 4.2481e-02, 3.2773e-02, 2.5284e-02,
                    1.9506e-02, 1.5048e-02, 1.1610e-02, 8.9565e-03, 6.9098e-03, 5.3307e-03,
                    4.1125e-03, 3.1727e-03, 2.4477e-03, 1.8883e-03, 1.4568e-03, 1.1239e-03,
                    8.6707e-04, 6.6893e-04, 5.1606e-04, 3.9813e-04, 3.0715e-04, 2.3696e-04,
                    1.8281e-04, 1.4103e-04, 1.0880e-04, 8.3940e-05, 6.4758e-05, 4.9959e-05,
                    3.8543e-05, 2.9735e-05, 2.2940e-05, 1.7698e-05, 1.3653e-05, 1.0533e-05,
                    8.1261e-06, 6.2691e-06, 4.8365e-06, 3.7313e-06, 2.8786e-06, 2.2208e-06,
                    1.7133e-06, 1.3218e-06, 1.0197e-06, 7.8668e-07, 6.0691e-07, 4.6822e-07,
                    3.6122e-07, 2.7867e-07, 2.1499e-07, 1.6586e-07, 1.2796e-07])  #atm
    PRESS = np.array([
        8.7609e+00, 6.7494e+00, 5.2015e+00, 4.0104e+00, 3.0936e+00, 2.3877e+00,
        1.8441e+00, 1.4244e+00, 1.0989e+00, 8.4685e-01, 6.5264e-01, 5.0319e-01,
        3.8817e-01, 2.9957e-01, 2.3145e-01, 1.7895e-01, 1.3804e-01, 1.0622e-01,
        8.1833e-02, 6.3082e-02, 4.8679e-02, 3.7590e-02, 2.9049e-02, 2.2448e-02,
        1.7318e-02, 1.3337e-02, 1.0270e-02, 7.9170e-03, 6.1081e-03, 4.7176e-03,
        3.6467e-03, 2.8176e-03, 2.1718e-03, 1.6725e-03, 1.2889e-03, 9.9369e-04,
        7.6670e-04, 5.9209e-04, 4.5766e-04, 3.5352e-04, 2.7250e-04, 2.0979e-04,
        1.6167e-04, 1.2469e-04, 9.6226e-05, 7.4308e-05, 5.7436e-05, 4.4364e-05,
        3.4188e-05, 2.6329e-05, 2.0286e-05, 1.5644e-05, 1.2074e-05, 9.3277e-06,
        7.2106e-06, 5.5668e-06, 4.2884e-06, 3.3030e-06, 2.5458e-06, 1.9635e-06,
        1.5151e-06, 1.1702e-06, 9.0535e-07, 6.9887e-07, 5.3807e-07, 4.1438e-07,
        3.1932e-07, 2.4632e-07, 1.9016e-07, 1.4688e-07, 1.1357e-07
    ])
    TEMP = np.array([
        315.831, 291.351, 268.535, 247.346, 227.702, 209.362, 192.299, 176.751, 161.847,
        147.853, 135.418, 125.017, 117.775, 113.285, 109.938, 107.363, 105.39, 103.868,
        104.459, 107.222, 110.497, 114.283, 118.187, 122.589, 127.06, 131.228, 135.486,
        139.73, 143.641, 146.691, 149.065, 151.006, 152.531, 153.806, 154.942, 155.989,
        156.935, 157.864, 158.794, 159.724, 160.663, 161.614, 162.541, 163.465, 164.418,
        165.359, 166.297, 167.241, 168.193, 169.146, 170.104, 171.037, 171.972, 172.928,
        173.854, 174.786, 175.73, 176.671, 177.611, 178.552, 179.469, 180.394, 182.643,
        187.104, 191.655, 196.205, 201.067, 208.558, 216.609, 224.446, 232.396
    ])
    TOTAM = np.array([
        2.6102e+26, 2.0062e+26, 1.5441e+26, 1.1881e+26, 9.1463e+25, 7.0417e+25,
        5.4416e+25, 4.1937e+25, 3.2795e+25, 2.5231e+25, 1.9411e+25, 1.4961e+25,
        1.1512e+25, 8.8469e+24, 6.8068e+24, 5.2784e+24, 4.1299e+24, 3.1877e+24,
        2.4417e+24, 1.8718e+24, 1.4415e+24, 1.1089e+24, 8.5382e+23, 6.6478e+23,
        5.1930e+23, 3.9836e+23, 3.0702e+23, 2.3524e+23, 1.8073e+23, 1.3929e+23,
        1.0737e+23, 8.3647e+22, 6.5346e+22, 5.0014e+22, 3.8389e+22, 2.9617e+22,
        2.2748e+22, 1.7503e+22, 1.3499e+22, 1.0542e+22, 8.1940e+21, 6.2989e+21,
        4.8282e+21, 3.7068e+21, 2.8620e+21, 2.2014e+21, 1.6956e+21, 1.3288e+21,
        1.0294e+21, 7.8993e+20, 6.0807e+20, 4.6671e+20, 3.5834e+20, 2.7692e+20,
        2.1334e+20, 1.6736e+20, 1.2933e+20, 9.9273e+19, 7.6240e+19, 5.8773e+19,
        4.5161e+19, 3.4672e+19, 2.6837e+19, 2.1116e+19, 1.6269e+19, 1.2480e+19,
        9.5997e+18, 7.3625e+18, 5.6829e+18, 4.3724e+18, 3.3567e+18
    ]) #cm-2
    AMOUNT0 = np.array([
    5.2204e+22, 4.0125e+22, 3.0881e+22, 2.3762e+22, 1.8293e+22, 1.4083e+22,
    1.0883e+22, 8.3875e+21, 6.5589e+21, 4.9569e+21, 2.1593e+21, 4.3213e+20,
    7.0672e+19, 4.5855e+18, 1.0746e+17, 2.4453e+15, 7.2683e+13, 2.1341e+12,
    5.9074e+10, 1.6339e+09, 4.2630e+07, 1.0523e+06, 2.4730e+04, 5.8501e+02,
    1.6748e+01, 5.1555e-01, 1.4395e-02, 3.8265e-04, 1.0073e-05, 2.4556e-07,
    5.7264e-09, 1.3802e-10, 3.9544e-12, 1.1722e-13, 3.5533e-15, 1.1266e-16,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
    0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00
    ])
    AMOUNT5 = np.array([
        1.1660e+04, 1.3519e+03, 2.1237e+02, 4.5806e+01, 2.9088e+02, 5.4929e+03,
        1.1195e+05, 1.7824e+06, 2.1318e+07, 2.3637e+08, 3.3454e+09, 4.4481e+10,
        2.9563e+11, 9.3866e+11, 1.7652e+12, 2.4517e+12, 2.5988e+12, 2.0538e+12,
        1.3411e+12, 8.5279e+11, 5.6488e+11, 3.9019e+11, 2.8339e+11, 2.1896e+11,
        1.7926e+11, 1.5445e+11, 1.4783e+11, 1.5723e+11, 1.7950e+11, 2.1005e+11,
        2.4795e+11, 2.9356e+11, 3.5001e+11, 4.0211e+11, 4.5726e+11, 5.1552e+11,
        5.9082e+11, 6.5944e+11, 7.1019e+11, 7.4878e+11, 7.6292e+11, 7.3813e+11,
        6.9071e+11, 6.2491e+11, 5.5216e+11, 4.7329e+11, 3.8918e+11, 3.0618e+11,
        2.1638e+11, 1.3385e+11, 7.5162e+10, 4.1210e+10, 2.3994e+10, 1.5372e+10,
        1.0859e+10, 9.1998e+09, 9.2497e+09, 9.2804e+09, 7.9459e+09, 5.4418e+09,
        2.9841e+09, 1.3146e+09, 4.3618e+08, 9.8324e+07, 1.7200e+07, 2.5367e+06,
        3.0652e+05, 2.9316e+04, 2.1934e+03, 1.2803e+02, 5.4741e+00
    ])
    AMOUNT10 = np.array([
        3.7796e+19, 2.9050e+19, 2.2358e+19, 1.7203e+19, 1.3244e+19, 1.0196e+19,
        7.8795e+18, 6.0725e+18, 4.7484e+18, 3.6401e+18, 2.7951e+18, 2.1544e+18,
        1.6577e+18, 1.2740e+18, 9.8018e+17, 7.6009e+17, 5.9291e+17, 4.5647e+17,
        3.4966e+17, 2.6805e+17, 2.0620e+17, 1.5794e+17, 1.2158e+17, 9.4664e+16,
        7.3709e+16, 5.6397e+16, 4.3285e+16, 3.3122e+16, 2.5417e+16, 1.9474e+16,
        1.4916e+16, 1.1545e+16, 8.9587e+15, 6.7845e+15, 5.1641e+15, 3.9502e+15,
        2.9814e+15, 2.2575e+15, 1.7052e+15, 1.3033e+15, 9.9066e+14, 7.4048e+14,
        5.4999e+14, 4.0636e+14, 3.0013e+14, 2.1915e+14, 1.5918e+14, 1.1639e+14,
        8.3463e+13, 5.8385e+13, 4.0361e+13, 2.7327e+13, 1.8121e+13, 1.1810e+13,
        7.4226e+12, 4.5445e+12, 2.5932e+12, 1.3889e+12, 7.1095e+11, 3.5688e+11,
        1.7545e+11, 8.4779e+10, 4.0567e+10, 1.8890e+10, 8.1064e+09, 3.2882e+09,
        1.2493e+09, 4.4504e+08, 1.4904e+08, 4.6492e+07, 1.3386e+07
    ])
    CONT0 = np.array([
        2.0668e-33, 1.0442e-29, 2.3977e-26, 2.6147e-23, 1.6643e-20, 6.0102e-18,
        1.6295e-15, 2.5310e-13, 4.3886e-11, 3.9071e-09, 1.6321e-07, 3.9429e-06,
        5.6935e-05, 5.0294e-04, 2.7507e-03, 9.7571e-03, 2.1774e-02, 2.9642e-02,
        2.4859e-02, 1.3086e-02, 4.2964e-03, 8.6805e-04, 1.0630e-04, 7.8571e-06,
        3.8962e-07, 1.1368e-08, 1.9637e-10, 2.4024e-12, 1.6388e-14, 6.0673e-17,
        1.1425e-19, 7.0043e-23, 2.8385e-26, 2.0334e-29, 7.0590e-33, 2.0488e-36,
        6.8474e-37, 6.8562e-37, 6.8747e-37, 6.9892e-37, 7.0927e-37, 7.1236e-37,
        7.1286e-37, 7.1305e-37, 7.1705e-37, 7.1779e-37, 7.1847e-37, 7.3302e-37,
        7.4147e-37, 7.4314e-37, 7.4665e-37, 7.4698e-37, 7.4628e-37, 7.5032e-37,
        7.5117e-37, 7.6711e-37, 7.7420e-37, 7.7585e-37, 7.7686e-37, 7.8047e-37,
        7.8093e-37, 7.7914e-37, 7.8933e-37, 8.2323e-37, 8.4337e-37, 8.5971e-37,
        8.7870e-37, 9.0460e-37, 9.3776e-37, 9.6605e-37, 9.9024e-37
    ])
    
    #Checking all calculations are correct
    assert np.allclose(ForwardModel.LayerX.BASEH/1.0e3,BASEH,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.BASEP/101325.,BASEP,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.PRESS/101325.,PRESS,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.TEMP,TEMP,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.TOTAM*1.0e-4,TOTAM,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,0]*1.0e-4,AMOUNT0,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,5]*1.0e-4,AMOUNT5,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,10]*1.0e-4,AMOUNT10,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.CONT[:,0]*1.0e-4,CONT0,rtol=1.0e-2)
    
#########################################################################################################################################################
    
def test_layerg_nemesis_units():
    '''
    Test the calculation of the layers against NEMESIS (dust units are in particles per gram of atmosphere)
    '''
    
    os.chdir('tests/files/Jupiter_test_layer/') #Changing directory to read files
    runname = 'cirstest'
    
    #Reading the input files
    Atmosphere,Measurement,Spectroscopy,Scatter,Stellar,Surface,CIA,Layer,Variables,Retrieval = ans.Files.read_input_files(runname)
    os.chdir(curr) #Changing directory back to the original
    
    #Initialising forward model class
    ForwardModel = ans.ForwardModel_0(runname=runname, Atmosphere=Atmosphere,Surface=Surface,Measurement=Measurement,Spectroscopy=Spectroscopy,Stellar=Stellar,Scatter=Scatter,CIA=CIA,Layer=Layer,Variables=Variables)
    
    #Calling subprofretg
    ForwardModel.subprofretg()
    
    #Calculating Path
    ForwardModel.calc_pathg()
    
    #NEMESIS results
    BASEH = np.array([
        -83.89, -71.03, -59.19, -48.29, -38.27, -29.07, -20.63, -12.87, -5.76, 0.84,
        6.86, 12.37, 17.45, 22.23, 26.8, 31.23, 35.56, 39.88, 44.15, 48.42,
        52.78, 57.26, 61.88, 66.64, 71.61, 76.84, 82.21, 87.76, 93.45, 99.27,
        105.2, 111.21, 117.35, 123.64, 129.94, 136.26, 142.63, 149.01, 155.4, 161.81,
        168.34, 174.95, 181.6, 188.25, 194.91, 201.6, 208.31, 215.03, 221.89, 228.83,
        235.78, 242.77, 249.75, 256.74, 263.77, 270.82, 278.01, 285.27, 292.55, 299.83,
        307.15, 314.48, 321.79, 329.21, 336.96, 344.9, 353., 361.28, 369.82, 378.69, 387.85
    ])  #km
    BASEP = np.array([
        9.8717e+00, 7.6158e+00, 5.8754e+00, 4.5328e+00, 3.4969e+00, 2.6978e+00,
        2.0813e+00, 1.6057e+00, 1.2387e+00, 9.5567e-01, 7.3728e-01, 5.6879e-01,
        4.3881e-01, 3.3853e-01, 2.6117e-01, 2.0149e-01, 1.5544e-01, 1.1992e-01,
        9.2517e-02, 7.1375e-02, 5.5064e-02, 4.2481e-02, 3.2773e-02, 2.5284e-02,
        1.9506e-02, 1.5048e-02, 1.1610e-02, 8.9565e-03, 6.9098e-03, 5.3307e-03,
        4.1125e-03, 3.1727e-03, 2.4477e-03, 1.8883e-03, 1.4568e-03, 1.1239e-03,
        8.6707e-04, 6.6893e-04, 5.1606e-04, 3.9813e-04, 3.0715e-04, 2.3696e-04,
        1.8281e-04, 1.4103e-04, 1.0880e-04, 8.3940e-05, 6.4758e-05, 4.9959e-05,
        3.8543e-05, 2.9735e-05, 2.2940e-05, 1.7698e-05, 1.3653e-05, 1.0533e-05,
        8.1261e-06, 6.2691e-06, 4.8365e-06, 3.7313e-06, 2.8786e-06, 2.2208e-06,
        1.7133e-06, 1.3218e-06, 1.0197e-06, 7.8668e-07, 6.0691e-07, 4.6822e-07,
        3.6122e-07, 2.7867e-07, 2.1499e-07, 1.6586e-07, 1.2796e-07
    ])  #atm
    PRESS = np.array([
        8.7609e+00, 6.7494e+00, 5.2015e+00, 4.0104e+00, 3.0936e+00, 2.3877e+00,
        1.8441e+00, 1.4244e+00, 1.0989e+00, 8.4685e-01, 6.5264e-01, 5.0319e-01,
        3.8817e-01, 2.9957e-01, 2.3145e-01, 1.7895e-01, 1.3804e-01, 1.0622e-01,
        8.1833e-02, 6.3082e-02, 4.8679e-02, 3.7590e-02, 2.9049e-02, 2.2448e-02,
        1.7318e-02, 1.3337e-02, 1.0270e-02, 7.9170e-03, 6.1081e-03, 4.7176e-03,
        3.6467e-03, 2.8176e-03, 2.1718e-03, 1.6725e-03, 1.2889e-03, 9.9369e-04,
        7.6670e-04, 5.9209e-04, 4.5766e-04, 3.5352e-04, 2.7250e-04, 2.0979e-04,
        1.6167e-04, 1.2469e-04, 9.6226e-05, 7.4308e-05, 5.7436e-05, 4.4364e-05,
        3.4188e-05, 2.6329e-05, 2.0286e-05, 1.5644e-05, 1.2074e-05, 9.3277e-06,
        7.2106e-06, 5.5668e-06, 4.2884e-06, 3.3030e-06, 2.5458e-06, 1.9635e-06,
        1.5151e-06, 1.1702e-06, 9.0535e-07, 6.9887e-07, 5.3807e-07, 4.1438e-07,
        3.1932e-07, 2.4632e-07, 1.9016e-07, 1.4688e-07, 1.1357e-07
    ])
    TEMP = np.array([
        315.831, 291.351, 268.535, 247.346, 227.702, 209.362, 192.299, 176.751, 161.847,
        147.853, 135.418, 125.017, 117.775, 113.285, 109.938, 107.363, 105.39, 103.868,
        104.459, 107.222, 110.497, 114.283, 118.187, 122.589, 127.06, 131.228, 135.486,
        139.73, 143.641, 146.691, 149.065, 151.006, 152.531, 153.806, 154.942, 155.989,
        156.935, 157.864, 158.794, 159.724, 160.663, 161.614, 162.541, 163.465, 164.418,
        165.359, 166.297, 167.241, 168.193, 169.146, 170.104, 171.037, 171.972, 172.928,
        173.854, 174.786, 175.73, 176.671, 177.611, 178.552, 179.469, 180.394, 182.643,
        187.104, 191.655, 196.205, 201.067, 208.558, 216.609, 224.446, 232.396
    ])
    TOTAM = np.array([
        2.6102e+26, 2.0062e+26, 1.5441e+26, 1.1881e+26, 9.1463e+25, 7.0417e+25,
        5.4416e+25, 4.1937e+25, 3.2795e+25, 2.5231e+25, 1.9411e+25, 1.4961e+25,
        1.1512e+25, 8.8469e+24, 6.8068e+24, 5.2784e+24, 4.1299e+24, 3.1877e+24,
        2.4417e+24, 1.8718e+24, 1.4415e+24, 1.1089e+24, 8.5382e+23, 6.6478e+23,
        5.1930e+23, 3.9836e+23, 3.0702e+23, 2.3524e+23, 1.8073e+23, 1.3929e+23,
        1.0737e+23, 8.3647e+22, 6.5346e+22, 5.0014e+22, 3.8389e+22, 2.9617e+22,
        2.2748e+22, 1.7503e+22, 1.3499e+22, 1.0542e+22, 8.1940e+21, 6.2989e+21,
        4.8282e+21, 3.7068e+21, 2.8620e+21, 2.2014e+21, 1.6956e+21, 1.3288e+21,
        1.0294e+21, 7.8993e+20, 6.0807e+20, 4.6671e+20, 3.5834e+20, 2.7692e+20,
        2.1334e+20, 1.6736e+20, 1.2933e+20, 9.9273e+19, 7.6240e+19, 5.8773e+19,
        4.5161e+19, 3.4672e+19, 2.6837e+19, 2.1116e+19, 1.6269e+19, 1.2480e+19,
        9.5997e+18, 7.3625e+18, 5.6829e+18, 4.3724e+18, 3.3567e+18
    ]) #cm-2
    AMOUNT0 = np.array([
        5.2204e+22, 4.0125e+22, 3.0881e+22, 2.3762e+22, 1.8293e+22, 1.4083e+22,
        1.0883e+22, 8.3875e+21, 6.5589e+21, 4.9569e+21, 2.1593e+21, 4.3213e+20,
        7.0672e+19, 4.5855e+18, 1.0746e+17, 2.4453e+15, 7.2683e+13, 2.1341e+12,
        5.9074e+10, 1.6339e+09, 4.2630e+07, 1.0523e+06, 2.4730e+04, 5.8501e+02,
        1.6748e+01, 5.1555e-01, 1.4395e-02, 3.8265e-04, 1.0073e-05, 2.4556e-07,
        5.7264e-09, 1.3802e-10, 3.9544e-12, 1.1722e-13, 3.5533e-15, 1.1266e-16,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00
    ])
    AMOUNT5 = np.array([
        1.1660e+04, 1.3519e+03, 2.1237e+02, 4.5806e+01, 2.9088e+02, 5.4929e+03,
        1.1195e+05, 1.7824e+06, 2.1318e+07, 2.3637e+08, 3.3454e+09, 4.4481e+10,
        2.9563e+11, 9.3866e+11, 1.7652e+12, 2.4517e+12, 2.5988e+12, 2.0538e+12,
        1.3411e+12, 8.5279e+11, 5.6488e+11, 3.9019e+11, 2.8339e+11, 2.1896e+11,
        1.7926e+11, 1.5445e+11, 1.4783e+11, 1.5723e+11, 1.7950e+11, 2.1005e+11,
        2.4795e+11, 2.9356e+11, 3.5001e+11, 4.0211e+11, 4.5726e+11, 5.1552e+11,
        5.9082e+11, 6.5944e+11, 7.1019e+11, 7.4878e+11, 7.6292e+11, 7.3813e+11,
        6.9071e+11, 6.2491e+11, 5.5216e+11, 4.7329e+11, 3.8918e+11, 3.0618e+11,
        2.1638e+11, 1.3385e+11, 7.5162e+10, 4.1210e+10, 2.3994e+10, 1.5372e+10,
        1.0859e+10, 9.1998e+09, 9.2497e+09, 9.2804e+09, 7.9459e+09, 5.4418e+09,
        2.9841e+09, 1.3146e+09, 4.3618e+08, 9.8324e+07, 1.7200e+07, 2.5367e+06,
        3.0652e+05, 2.9316e+04, 2.1934e+03, 1.2803e+02, 5.4741e+00
    ])
    AMOUNT10 = np.array([
        3.7796e+19, 2.9050e+19, 2.2358e+19, 1.7203e+19, 1.3244e+19, 1.0196e+19,
        7.8795e+18, 6.0725e+18, 4.7484e+18, 3.6401e+18, 2.7951e+18, 2.1544e+18,
        1.6577e+18, 1.2740e+18, 9.8018e+17, 7.6009e+17, 5.9291e+17, 4.5647e+17,
        3.4966e+17, 2.6805e+17, 2.0620e+17, 1.5794e+17, 1.2158e+17, 9.4664e+16,
        7.3709e+16, 5.6397e+16, 4.3285e+16, 3.3122e+16, 2.5417e+16, 1.9474e+16,
        1.4916e+16, 1.1545e+16, 8.9587e+15, 6.7845e+15, 5.1641e+15, 3.9502e+15,
        2.9814e+15, 2.2575e+15, 1.7052e+15, 1.3033e+15, 9.9066e+14, 7.4048e+14,
        5.4999e+14, 4.0636e+14, 3.0013e+14, 2.1915e+14, 1.5918e+14, 1.1639e+14,
        8.3463e+13, 5.8385e+13, 4.0361e+13, 2.7327e+13, 1.8121e+13, 1.1810e+13,
        7.4226e+12, 4.5445e+12, 2.5932e+12, 1.3889e+12, 7.1095e+11, 3.5688e+11,
        1.7545e+11, 8.4779e+10, 4.0567e+10, 1.8890e+10, 8.1064e+09, 3.2882e+09,
        1.2493e+09, 4.4504e+08, 1.4904e+08, 4.6492e+07, 1.3386e+07
    ])
    CONT0 = np.array([
        2.0668e-33, 1.0442e-29, 2.3977e-26, 2.6147e-23, 1.6643e-20, 6.0102e-18,
        1.6295e-15, 2.5310e-13, 4.3886e-11, 3.9071e-09, 1.6321e-07, 3.9429e-06,
        5.6935e-05, 5.0294e-04, 2.7507e-03, 9.7571e-03, 2.1774e-02, 2.9642e-02,
        2.4859e-02, 1.3086e-02, 4.2964e-03, 8.6805e-04, 1.0630e-04, 7.8571e-06,
        3.8962e-07, 1.1368e-08, 1.9637e-10, 2.4024e-12, 1.6388e-14, 6.0673e-17,
        1.1425e-19, 7.0043e-23, 2.8385e-26, 2.0334e-29, 7.0590e-33, 2.0488e-36,
        6.8474e-37, 6.8562e-37, 6.8747e-37, 6.9892e-37, 7.0927e-37, 7.1236e-37,
        7.1286e-37, 7.1305e-37, 7.1705e-37, 7.1779e-37, 7.1847e-37, 7.3302e-37,
        7.4147e-37, 7.4314e-37, 7.4665e-37, 7.4698e-37, 7.4628e-37, 7.5032e-37,
        7.5117e-37, 7.6711e-37, 7.7420e-37, 7.7585e-37, 7.7686e-37, 7.8047e-37,
        7.8093e-37, 7.7914e-37, 7.8933e-37, 8.2323e-37, 8.4337e-37, 8.5971e-37,
        8.7870e-37, 9.0460e-37, 9.3776e-37, 9.6605e-37, 9.9024e-37
    ])
    
    #Checking all calculations are correct
    assert np.allclose(ForwardModel.LayerX.BASEH/1.0e3,BASEH,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.BASEP/101325.,BASEP,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.PRESS/101325.,PRESS,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.TEMP,TEMP,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.TOTAM*1.0e-4,TOTAM,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,0]*1.0e-4,AMOUNT0,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,5]*1.0e-4,AMOUNT5,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.AMOUNT[:,10]*1.0e-4,AMOUNT10,rtol=1.0e-2)
    assert np.allclose(ForwardModel.LayerX.CONT[:,0]*1.0e-4,CONT0,rtol=1.0e-2)
    
################################################################################################################################################